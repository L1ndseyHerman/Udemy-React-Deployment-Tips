{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","console","log","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCmBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBCgDSC,EA5CG,SAACR,GAEjB,IAZkBS,EAAQC,EAYpBC,EAAUC,cACVC,EAAWC,cAIXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAErCC,GAnBYV,EAmBcT,EAAMS,OAnBZC,EAmBoBK,EAlBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAgBxCgB,QAAQC,IAAIX,GAYZ,OACE,eAAC,WAAD,WACE,qBAAKZ,UAAWC,IAAQuB,QAAxB,SACE,yBAAQC,QAbe,WAE3Bf,EAAQgB,KAAK,CACXC,SAAUf,EAASe,SACnBX,OAAO,SAAD,OAAYF,EAAqB,OAAS,UAS9C,kBACQA,EAAqB,aAAe,iBAG9C,oBAAId,UAAWC,IAAQ2B,KAAvB,SACGV,EAAaW,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEExB,GAAIwB,EAAMxB,GACVF,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAM3B,MAHP2B,EAAMxB,a,yBCnCRyB,EAXO,WACpB,OACE,sBAAK/B,UAAWC,IAAQ+B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMhC,UAAU,MAAMK,GAAG,aAAzB,6B,gBC6BS4B,UA7BG,WAEd,MAAyDC,YACrDC,KACA,GAFGC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAcC,EAAlC,EAA4BC,KAAoBC,EAAhD,EAAgDA,MAShD,OAJAC,qBAAU,WACNL,MACD,CAACA,IAEW,YAAXC,EACO,qBAAKrC,UAAU,WAAf,SACH,cAAC0C,EAAA,EAAD,MAIJF,EAEO,mBAAGxC,UAAU,mBAAb,SAAiCwC,IAG7B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAItD,cAAC,EAAD,CAAWnC,OAAQ8B,IAHf,cAAC,EAAD","file":"static/js/5.46ae946a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2hmTt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__2i0tx\",\"sorting\":\"QuoteList_sorting__12Kb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3_wbu\"};","import { Link } from 'react-router-dom';\n\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\n//  useLocation is for query params.\nimport {useHistory, useLocation} from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  console.log(location);\n\n  const changeSortingHandler = () => {\n    //  Push allows u to click a back button and go to the prev url, replace doesn't, can't go back.\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    });\n    //  The above code is a more readable version of this. Both work, just cleaner code.\n    //history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\n\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from 'react';\r\n\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\nimport useHttp from '../hooks/hooks/use-http';\r\nimport { getAllQuotes } from '../lib/lib/api';\r\n\r\nconst AllQuotes = () => {\r\n\r\n    const {sendRequest, status, data: loadedQuotes, error} = useHttp(\r\n        getAllQuotes, \r\n        true\r\n    );\r\n\r\n    useEffect(() => {\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n    if (status === 'pending') {\r\n        return <div className=\"centered\">\r\n            <LoadingSpinner />\r\n        </div>;\r\n    }\r\n\r\n    if (error) {\r\n        //  This has two classes: \"centered\" AND \"focused\"!\r\n        return <p className='centered focused'>{error}</p>;\r\n    }\r\n\r\n    if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n        return <NoQuotesFound />;\r\n    }\r\n\r\n    return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n\r\nexport default AllQuotes;"],"sourceRoot":""}